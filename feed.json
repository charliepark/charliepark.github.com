{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Charlie Park!",
  "home_page_url": "https://charliepark.org/",
  "feed_url": "https://charliepark.org/feed.json",
  "icon": "https://charliepark.org/images/arrow_for_feed.jpg",
  "favicon": "https://charliepark.org/favicon.ico",
  "language": "en-US",
  "items": [
  
    {
      "id": "https://charliepark.org/being_a_good_manager_is_like_being_a_good_friend/",
      "url": "https://charliepark.org/being_a_good_manager_is_like_being_a_good_friend/",
      "title": "quote: /being_a_good_manager_is_like_being_a_good_friend/",
      "content_html": "<p>Much of [being a good] manager is not dissimilar from being a good partner or friend. Both involve active, empathetic listening, and a decentering of one’s own experiences to coach and mentor other folks instead of just waiting for a chance to tell our own stories.</p><p><a href='https://www.brookshelley.com/posts/2020-11-12-two-weeks-as-a-manager/'>Brook Shelley</a></p>"
    },
  
    {
      "id": "https://charliepark.org/prop_drilling_regex/",
      "url": "https://charliepark.org/prop_drilling_regex/",
      "title": "text: /prop_drilling_regex/",
      "content_html": "<h1>A RegEx To Help You Move From Prop-Drilling In React To Using The useContext Hook</h1><p>I added hooks to my app a while ago, but hadn't gone through to refactor a number of places where I was drilling props from one component down through to a component many layers deep.</p><p>I wanted to see which properties I was passing along a lot, to see what some of the more common offenders were, so I could move them into useContext hooks.</p><p>In VSCode there's a really handy global regex search. Just select the last two options from the search bar (&quot;case senseitive&quot; and &quot;regex&quot;) and paste this in:</p><pre class='language-js'><code class='language-js'><span class='token punctuation'>(</span><span class='token punctuation'>.</span><span class='token operator'>*</span><span class='token punctuation'>)</span><span class='token operator'>=</span>\\<span class='token punctuation'>{</span>\\<span class='token number'>1</span>\\<span class='token punctuation'>}</span></code></pre><p>The results will look something like this:</p><img src='/images/props.png' alt='A screenshot of VSCode with a search term and its results showing React code.' style='border-radius: 0.3em'><p>The regex is doing this:</p><pre class='language-js'><code class='language-js'><span class='token punctuation'>(</span><span class='token punctuation'>.</span><span class='token operator'>*</span><span class='token punctuation'>)</span> → <span class='token string'>'Capture some string of text …'</span><br><span class='token operator'>=</span>\\<span class='token punctuation'>{</span>  → <span class='token string'>'… followed by an equals sign and an open bracket …'</span><br>\\<span class='token number'>1</span>   → <span class='token string'>'… followed by the same exact string of text …'</span><br>\\<span class='token punctuation'>}</span>   → <span class='token string'>'… with a closing bracket following it.'</span></code></pre><p>Obviously, <em>some</em> of the instances that match that pattern will be legit. But if you're seeing a lot of the same ones over and over, they might be good candidates for moving either into a ContextProvider or closer to wherever you're using them.</p><p>So. Go refactor. Have fun.</p><p>(Side note: 485 results in 58 files. Merp. Good news, though: it's getting better.)</p>"
    },
  
    {
      "id": "https://charliepark.org/wasps/",
      "url": "https://charliepark.org/wasps/",
      "title": "image: /wasps/",
      "content_html": "<p><img src='/images/wasps.jpg' alt='A black-and-white image of four World War 2-era women on a runway, walking away from a B-17 bomber.'></p><p>Frances Green, Margaret (Peg) Kirchner, Ann Waldner and Blanche Osborn (members of the <a href='https://en.wikipedia.org/wiki/Women_Airforce_Service_Pilots'>WASPs</a>) leaving their plane, “Pistol Packin’ Mama”</p>"
    },
  
    {
      "id": "https://charliepark.org/circumtambulation/",
      "url": "https://charliepark.org/circumtambulation/",
      "title": "text: /circumtambulation/",
      "content_html": "<h1>A Solo Circumtambulation</h1><p>I watch polls and election returns the way many people watch sports. This year's been an especially tense one for me — although I had every expectation that Trump would be beaten, I also had every expectation that the counting of ballots would be delayed in critical states, and that I'd be in a constant state of refreshing various news sites, state Board of Election sites, and Twitter.</p><p>So I decided to take a few days away from my screens and to head to Mt. Tamalpais for some camping and hiking.</p><p>I was especially interested in doing a <em>circumtambulation</em> — a walk <em>around</em> Tam. I first heard of the idea in the book <em>Walkabout Northern California</em>, by Tom Courtney. He outlines a five-day, 56-mile hike that goes from Muir Beach up to Olema, then past Woodacre and south of Fairfax, then to Mill Valley and the Dipsea Steps, back to Muir Beach. Perhaps one day I'll do that route, but it ends up straying pretty far from Mt. Tam proper.</p><p>I wanted to stay entirely on Tam itself, so I charted a one day hike of 18 miles. I didn't have a camera with me (remember: no screens!), so I didn't get any photos, but I wanted to describe the hike in case anybody else is looking for a route to circumambulate Mt. Tam.</p><p>Because Google Maps doesn't always know what roads connect to what hiking trails I have to show this as a few different maps, but here's my route:</p><iframe src='https://www.google.com/maps/embed?pb=!1m26!1m12!1m3!1d3147.976806507565!2d-122.60954433478426!3d37.90760481227924!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m11!3e2!4m3!3m2!1d37.904853599999996!2d-122.60393769999999!4m5!1s0x808591717c877c11%3A0xf1c1953da53fc7a0!2sForbes%20Bench%2C%20Mill%20Valley%2C%20CA!3m2!1d37.9098764!2d-122.61110989999999!5e0!3m2!1sen!2sus!4v1604708306991!5m2!1sen!2sus' width='560' height='450' frameborder='0' style='border:0;' allowfullscreen='' aria-hidden='false' tabindex='0'></iframe><iframe src='https://www.google.com/maps/embed?pb=!1m46!1m12!1m3!1d12592.287772174277!2d-122.61084708023792!3d37.905381074462674!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m31!3e2!4m5!1s0x80859171bbdb688b%3A0x5672a7f0e8440151!2sRock%20Spring%20Trailhead%2C%20West%20Ridgecrest%20Boulevard%2C%20Stinson%20Beach%2C%20CA!3m2!1d37.910698!2d-122.6126681!4m5!1s0x808593f8e5652753%3A0x7d171d6312dff2dc!2sCataract%20Falls!3m2!1d37.9318433!2d-122.63538829999999!4m3!3m2!1d37.9271877!2d-122.6058231!4m3!3m2!1d37.9285906!2d-122.5836089!4m3!3m2!1d37.9350111!2d-122.56627049999999!4m5!1s0x808591a06a1c71f1%3A0x413d9f55ac13ff27!2sPantoll%20Campground!3m2!1d37.903992699999996!2d-122.6038858!5e0!3m2!1sen!2sus!4v1604707101660!5m2!1sen!2sus' width='560' height='450' frameborder='0' style='border:0;' allowfullscreen='' aria-hidden='false' tabindex='0'></iframe><p>Essentially, here's the route:</p><p>Pantoll → Old Stage Road / Old Mine Trail → Forbes Bench → Rock Spring Trailhead → Cataract Trail → Cataract Falls → Mickey O'Brien Trail → Barth's Retreat → Potrero Meadows → Rifle Camp → Northside Trail → Inspiration Point → [optional side hike up to crest of Tam: Eldridge Grade (up) to East Ridgecrest Blvd and then back] → Eldridge Grade (down) → Indian Fire Rd → Hoo-Koo-E-Koo Rd → Old Railroad Grade → Hoo-Koo-E-Koo Trail → Matt Davis Trail → Bootjack → Pantoll.</p><p>All told, it was around 18 miles, but that includes the trip up to East Ridgecrest and back down, which added a little over 2 miles to the journey.</p><p>If you aren't starting at Pantoll, I'd recommend parking at the Rock Spring Trailhead and going the route I outlined above, but after going down the Eldridge Grade for a bit, look for the sign for the Wheeler Trail at one of the turns. Take that down to connect with Hoo-Koo-E-Koo Rd. Wheeler isn't marked on Google Maps right now, but <a href='https://goo.gl/maps/fqudT3mDXfm4a6k37'>I've marked it on this map</a>. It cuts over a mile of fire roads from the hike, and has you descend through a cool redwood forest. Then, after you get onto the Matt Davis Trail, take the Nora Trail up to the West Point Inn and then take the Rock Spring Trail back to the Rock Spring parking lot. It'd be about 11.5 miles, mostly flat. Here's a map of that route:</p><iframe src='https://www.google.com/maps/embed?pb=!1m50!1m12!1m3!1d50357.42912823402!2d-122.63203046386087!3d37.922502661451155!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m35!3e2!4m5!1s0x80859171bbdb688b%3A0x5672a7f0e8440151!2sRock%20Spring%20Trailhead%2C%20West%20Ridgecrest%20Boulevard%2C%20Stinson%20Beach%2C%20CA!3m2!1d37.910698!2d-122.6126681!4m3!3m2!1d37.921828399999995!2d-122.6260751!4m3!3m2!1d37.9271089!2d-122.60679449999999!4m3!3m2!1d37.9255079!2d-122.5693841!4m3!3m2!1d37.9165531!2d-122.5924726!4m5!1s0x8085905426f0bb07%3A0x1961183bed1740aa!2sWest%20Point%20Inn%2C%20Old%20Railroad%20Grade%20Fire%20Road%2C%20Mill%20Valley%2C%20CA!3m2!1d37.9166667!2d-122.5938889!4m5!1s0x80859171bbdb688b%3A0x5672a7f0e8440151!2sRock%20Spring%20Trailhead%2C%20West%20Ridgecrest%20Boulevard%2C%20Stinson%20Beach%2C%20CA!3m2!1d37.910698!2d-122.6126681!5e0!3m2!1sen!2sus!4v1605216318108!5m2!1sen!2sus' width='560' height='450' frameborder='0' style='border:0;' allowfullscreen='' aria-hidden='false' tabindex='0'></iframe><p>All in all, it was a great day on Tam. Be sure to take a lot of trail food and water — at least a liter for every five or six miles (per person).</p><p>Next adventure, I think, will either be biking on fire roads all the way up to Point Reyes Station, or possibly scrambling up some of the creeks on the west side of the Bolinas Ridge. They're positioned just like Steep Ravine, and I have to imagine they have a similar climate. It'd be so fun to find a secret Muir Woods.</p>"
    },
  
    {
      "id": "https://charliepark.org/crater_lake/",
      "url": "https://charliepark.org/crater_lake/",
      "title": "image: /crater_lake/",
      "content_html": "<video controls>  <source src='/images/crater_lake_timelapse.mp4' type='video/mp4'></video><p>The Milky Way, stabilized, at Crater Lake. By <a href='https://www.instagram.com/brummelphoto/'>Eric Brummel</a>.</p>"
    },
  
    {
      "id": "https://charliepark.org/the_standard_you_walk_past/",
      "url": "https://charliepark.org/the_standard_you_walk_past/",
      "title": "video: /the_standard_you_walk_past/",
      "content_html": "<iframe width='560' height='315' src='https://www.youtube-nocookie.com/embed/QaqpoeVgr8U' frameborder='0' allow='accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture' allowfullscreen></iframe><blockquote><p>“Every one of us is responsible for the culture and reputation of our Army and the environment in which we work. <strong>If you become aware of any individual degrading another, then show moral courage and take a stand against it.</strong> No one has EVER explained to me how the exploitation or degradation of others, enhances capability, or honours the traditions of the Australian Army.</p><p>I will be ruthless in ridding the army of people who cannot live up to it’s values. And I need every one of you to support me in achieving this. <strong>The standard you walk past is the standard you accept.</strong> That goes for all of us, but especially those, who by their rank, have a leadership role.”</p></blockquote>"
    },
  
    {
      "id": "https://charliepark.org/seismic/",
      "url": "https://charliepark.org/seismic/",
      "title": "image: /seismic/",
      "content_html": "<p><img src='/images/seismic.gif' alt='A gif showing a professor moving blocks to represent buildings of different heights, showing that buildings of different heights respond in different ways to earthquake waves of varying frequencies. A tall building will respond to low-frequency oscillations. A medium building will respond to medium-frequency oscillations. A short building will respond to high-frequency oscillations.'></p><p>A demonstration of the various responses from buildings of different heights to earthquake waves of varying frequencies.</p>"
    },
  
    {
      "id": "https://charliepark.org/oryoki/",
      "url": "https://charliepark.org/oryoki/",
      "title": "image: /oryoki/",
      "content_html": "<p><img src='/images/oryoki.jpg' alt='A set of six black Japanese bowls of different sizes, laid out on a table.'></p><p>Ōryōki: “vessel that contains just enough”<br>(From <a href='https://pojstudio.com/products/oryoki'>POJ Studio</a>, via <a href='https://twitter.com/brookshelley/status/1319758516677046272'>Brook Shelley</a>)</p>"
    },
  
    {
      "id": "https://charliepark.org/disaster_prep/",
      "url": "https://charliepark.org/disaster_prep/",
      "title": "quote: /disaster_prep/",
      "content_html": "<p>Just as we can’t train for a marathon in a weekend, we shouldn’t approach disaster-proofing our houses as a single, massive project — doing so will almost guarantee it doesn’t happen. Even small steps can make a big difference, such as stocking bottled water, changing your flashlight batteries (and knowing where the flashlights are), agreeing on an external meeting place with family members, programming key numbers into your phone. To put it another way: If you know your cholesterol level, you should also know where your water shut-off valve is.</p><p>Dan Kessler, CEO at <a href='https://www.helloharbor.com/'>Harbor</a>, in <a href='https://www.fastcompany.com/90567485/were-thinking-about-disaster-prep-all-wrong'>Fast Company</a></p>"
    },
  
    {
      "id": "https://charliepark.org/photomicrography/",
      "url": "https://charliepark.org/photomicrography/",
      "title": "image: /photomicrography/",
      "content_html": "<p><img src='/images/photomicrography/photomicrography_1.jpg' alt='A colorful image from a light microscope: A fluorescent turtle embryo'></p><p><img src='/images/photomicrography/photomicrography_2.jpg' alt='A colorful image from a light microscope: The dorsal view of bones and scales (blue) and lymphatic vessels (orange) in a juvenile zebrafish'></p><p><img src='/images/photomicrography/photomicrography_3.jpg' alt='A colorful image from a light microscope: An octopus bimaculoides embryo'></p><p>“<a href='https://www.nikonsmallworld.com/'>The Nikon Small World Competition</a> first began in 1975 as a means to recognize and applaud the efforts of those involved with photography through the light microscope. Since then, Small World has become a leading showcase for photomicrographers from the widest array of scientific disciplines.”</p>"
    },
  
    {
      "id": "https://charliepark.org/dont_be_afraid_of_the_clocks/",
      "url": "https://charliepark.org/dont_be_afraid_of_the_clocks/",
      "title": "poem: /dont_be_afraid_of_the_clocks/",
      "content_html": "<h1>Lovers, 1988</h1><p>by Félix González-Torres</p><p><img src='/images/perfect_lovers.jpg' alt='Two clocks, side by side, showing the same time'></p><p>Don’t be afraid of the clocks,they are our time,time has been so generous to us.We imprinted time with the sweet taste of victory.We conquered fate by meeting at a certain time in a certain space.We are a product of the time,therefore we give back credit were it is due: time.</p><p>We are synchronized, now and forever.</p><p>I love you.</p>"
    },
  
    {
      "id": "https://charliepark.org/roadtrip/",
      "url": "https://charliepark.org/roadtrip/",
      "title": "text: /roadtrip/",
      "content_html": "<h1>Roadtrip</h1><p>I've been meaning to get away for a solo roadtrip for a while. I've had a couple of short trips over the last couple of years, but they kept getting cut short — three- or four-day trips that were reduced to a single night away.</p><p>I made time at the end of last week for a solo trip, though, and had a great adventure. (Unfortunately, as you'll see, my camera wasn't the best. Even with a good camera, capturing the scale of the national parks I visited is tough. When you're taking photos with a potato, good luck.)</p><figure>  <img src='/images/roadtrip/roadtrip_route.jpg' alt='A map of my trip, from San Francisco to a number of national parks, then back up along the coast.'>  <figcaption><span>Roughly the route I took, covering 2,200 miles, </span><span>four national parks, and a trip up the coast, over four days.</span></figcaption></figure><p>I love being around people, and — especially during quarantine — miss being with friends more. But there's also something great about getting away by yourself. I wish I could say that I had some sort of deep contemplative epiphany, but it'd be unfair to set that up as an <em>expectation</em> of a trip like this. Mostly, I just wanted to see some national parks that I haven't seen since I was a teenager. (We're planning another cross-country drive this winter as a family, so this was also a bit of a scouting run.)</p><p>I got accustomed to long days of driving this summer, during our inagural cross-country trip (which I should write up notes on at some point; it was great); this trip only reaffirmed that, yes, I like driving, and no, long distances aren't a problem. The four days of this trip saw drive times of 12 hours, 4 hours, <em>17 hours</em>, and 8 hours. That third day was a doozy.</p><h2>Day One: SF to Zion</h2><p>I'd intended to leave at the crack of dawn, but had a few projects to wrap up before I could leave. I finished them up around 10, and was able to pack up and get out the door just after lunch. Driving on Route 5 was easy, but — hoo, buddy — was it boring. The entire span from Tracy through Bakersfield is a whole lot of nothing. And then you get to the desert. It was getting dark when I crossed into Nevada, and fully dark by the time I passed through Las Vegas. Upside to that, though: have you really seen Las Vegas if you haven't seen it at night?</p><p>I continued on, and made my way to some Bureau of Land Management land outside of La Verkin, UT, where I camped for the night.</p><p>Cool thing a lot of people don't know: Almost all Bureau of Land Management land and National Forest land is available for you to camp on — no cost, no reservation needed. (Check out the &quot;Dispersed Camping&quot; section of <a href='https://www.blm.gov/programs/recreation/camping'>this BLM page on camping on public lands</a> for more.) If you go the route of dispersed camping, two good resources: the website <a href='https://freecampsites.net'>freecampsites.net</a> and the iOS app <a href='https://outsideanalytics.com/outly/'>Outly</a>.</p><p>Although I'd normally take a tent and set it up to sleep in, I tried something new this time. I brought a trifold foam mattress and a comforter, and just set them up in the back of my car (back seat down) and slept there. It actually worked really well, and meant that — in the morning — I didn't have to pack anything up. Just fold up the foam mattress, flip the back seat back up, and get going. (Side benefit: the ground around here was extremely dusty — I mean … it <em>is</em> a desert — so a tent would have been covered in red dust. This was a lot cleaner.)</p><p>I'd definitely try this approach again, though I think a thinner mattress would be a bit easier to work with. Although the mattress I had was really comfortable, it took up a lot of space in the back of the car, and when you're working with the trunk and back seat of a Prius, the bulk of a mattress like that can make things difficult.</p><p>The BLM campsite had a few more people than I was expecting — mostly RVs or fifth-wheel trailers — but I was able to find a spot pretty easily. And, again, since I was in my car, I was really just looking for something level and not too close to other people.</p><h2>Day Two: Zion, Cedar Breaks, and Bryce Canyon</h2><p>Upon waking up, I could see that, yes, there was some pretty great geology surrounding me. It was pretty nice to go from &quot;it's getting dark and you're in the Mojave Desert&quot; to &quot;it's dawn and you're in the middle of some giant mesas and buttes.&quot;</p><figure>  <img src='/images/roadtrip/dawn_at_la_verkin.jpg' alt='The sun, rising over some mesas and rock formations.'>  <figcaption>Dawn. Again, apologies for the poor camera.</figcaption></figure><p>I drove to Springdale, UT to get breakfast and start my trip in to Zion. A ham and cheese omelette at MeMe's cafe. Parking at the long-term parking in Springdale ($12 for the day). Biking in to the Zion walking/biking entrance gate.</p><p>Our &quot;<a href='https://www.nps.gov/home/planyourvisit/interagency-pass-program.htm'>America the Beautiful — National Parks and Federal Recreational Lands Pass</a>&quot; had expired, so I got a new one. $80 to get in to any national park or monument is such a deal. And I think — kind of like a gym membership — once you have it, you're more inclined to <em>just go</em>. I'm a fan of anything that reduces the friction that stands between you and adventure.</p><p>Once in, I biked the 7 miles along the canyon floor to get to the Temple of Sinawava. Side note: The rock formations at Zion have some pretty amazing names — The Court of the Patriarchs, The Spearhead, The Great White Throne, Mountain of Mystery, The Sentinel. The biking in was pretty easy. I wish I could share photos with you of the bike in, but my camera just couldn't capture the scale of the canyon or the formations at Zion.</p><p>Now at the Temple of Sinawava, I locked up my bike and &quot;hiked&quot; along the Riverside Walk, up the side of the canyon along the Virgin River. (It's really a paved path.) After a mile or so I got to the trailhead for the Zion Narrows, which is one of my favorite hikes in the world. BUT! There's currently an algae bloom in the Virgin River, where a cyanobacteria called Tychonema is releasing a neurotoxin in the water. So I didn't do the Narrows hike. Plenty of other people were, though! And, odds are good that they were totally fine. But I was solo, didn't have quite the right gear for a water-up-to-your-thighs hike, and didn't want to run the risk of neurotoxin exposure. (Apparently, symptoms include &quot;skin rash, salivation, drowsiness, tingling, burning, numbness, pain, incoherent speech, muscle contractions or twitching, vomiting, and diarrhea.&quot; Goiks!) Hopefully the algae blooms and neurotoxins will have cleared up when I bring the family.</p><p>Anyway, I walked the mile back to my bike, then biked back to Springdale. Mostly downhill on the trip out of the canyon, so the bike ride back was easier and faster. Downhill return trips are always nice.</p><p>Back in Springdale I grabbed a slice of Bumbleberry Pie and ice cream, then headed to the car.</p><p>From Springdale, the drive up to Cedar Breaks was pretty easy. Highlight was the climb out of Zion Canyon, where several switchbacks gave some amazing views of different peaks in the park. After about two hours I made my way to a few overlooks at Cedar Breaks.</p><figure>  <img src='/images/roadtrip/cedar_breaks.jpg' alt='Various rock formations at Cedar Breaks National Park.'>  <figcaption><span>Cedar Breaks</span></figcaption></figure><p>I'd never heard of Cedar Breaks before a few weeks ago, when I saw a blurb in the AAA magazine about it, as a less-busy version of Bryce / the Grand Canyon. I'm glad I went, but would only recommend going if you're trying to see something different, or you want to go somewhere with fewer people than the other parks. If you do a similar trip but have to cut one, it'd be the one I'd suggest dropping. (I'm happy to hear from any Cedar Breaks apologists on why I missed the coolest part of it. If that's you, please let me know.)</p><p>I then proceded on to Bryce Canyon, which was probably my favorite of the parks this trip.</p><p>Oh — quick aside. When driving in to Bryce from the west, you go through Red Canyon, which is a relatively short section of the highway where you feel like you're in the middle of a Road Runner cartoon. The rocks are, as you'd expect, a bright reddish-orange, and have some pretty great shapes. No photos, unfortunately, as I figured I'd get some photos on my way out (and then it was dark when I departed in the morning). (Lesson from that: don't assume you'll be revisiting a cool spot later and put off grabbing photos now. If it's neat, grab a photo.) Anyway, Red Canyon is absolutely worth swinging through, and if I'd planned my trip a bit better, I might have added some mountain biking on the trails here.</p><p>Anyway, through Red Canyon and on to Bryce. Will let the photos speak for themselves. No filters on these, by the way, though I can't say why the color looks so different from shot to shot.</p><img src='/images/roadtrip/bryce_1.jpg' alt='Looking into Bryce Canyon.'><img src='/images/roadtrip/bryce_2.jpg' alt='Another shot, looking down into Bryce Canyon.'><img src='/images/roadtrip/bryce_3.jpg' alt='More of Bryce Canyon, showing a number of delicate spires with stratified layers of earth.'><p>Fun word — those spires are called &quot;hoodoos&quot;.</p><p>I know the image of Bryce might look a lot like Cedar Breaks, but know that the scale of the two is very different, and the view you get at Bryce is much better.</p><p>I'm hoping to hike on into the canyon next time I go to Bryce. Hitting the view points is lovely, but I bet the views inside the canyon are ridiculous. So: biking at Red Canyon, hiking at Bryce.</p><figure>  <img src='/images/roadtrip/miyazaki_tree.jpg' alt='A tree with roots exposed by wind, looking like it's slinking away.'>  <figcaption>Also at Bryce was this fun tree that looks like it might moonlight as a character in a Miyazaki film.</figcaption></figure><p>The sun was setting, so I headed off to some more National Forest land for another night of car camping. I haven't seen a more star-filled night sky since I camped across the country back in high school. It was pretty incredible.</p><h2>Day Three: The Grand Canyon and an Epic Day of Driving</h2><p>I woke up on the early side and figured I'd see what I could fit in to the day. So. Up and at 'em.</p><p>I first made my way to Kanab, Utah, which was apparently used as a backdrop for a number of western films back in the day. A breakfast burrito and latte from a foodtruck run by a nice Mormon lady, and then to the North Rim of the Grand Canyon.</p><p>I was a little unsure about whether to hit the North or the South Rim. The Grand Canyon's shaped a bit like a crescent, with the two points pointing up. So the view from the North Rim is a bit more constrained, but for the route I was traveling, it seemed to make a bit more sense.</p><p>At the North Rim there's a lodge and a visitor center, though with COVID, it wasn't set up the way I expect it normally is. There were mostly just some sandwich boards noting different recommendations from park rangers on how to enjoy the park.</p><img src='/images/roadtrip/signs.jpg' alt='Sandwich boards showing advice for how to visit the park.'><p>I especially liked the boards' advice to &quot;take a photo of this and go enjoy the canyon&quot;.</p><p>I walked to Bright Angel Point to get a view of the Grand Canyon. It's amazing to think about how long the weathering took to erode the canyon down … and then to realize that it's not like the ground <em>started</em> built up, but that those sedimentary layers had to all form over millions and millions of years. It's … humbling.</p><img src='/images/roadtrip/grand_canyon_1.jpg' alt='Looking into the Grand Canyon.'><img src='/images/roadtrip/grand_canyon_2.jpg' alt='Another shot of the Grand Canyon, looking into the distance.'><img src='/images/roadtrip/grand_canyon_3.jpg' alt='One more shot of the Grand Canyon, showing lots of sedimentary layers.'><p>Little did I know it, but I still had a massive day ahead of me.</p><p>I had a decision to make. I had wanted to see Zion and Bryce canyons. (Check!) I had hoped to see the Grand Canyon as well. (Check!) Cedar Breaks had been a &quot;well, maybe?&quot; … and I'd now seen that one, too. (Check!)</p><p>So now what? I could have maybe spent more time in the Grand Canyon, hiking down from the rim. Or I could head to the Southern Rim to check that out? Or, to be honest, I was missing the family, so I considered heading back home early. But, again and again, we've seen the value of optimizing for story. So that steered the ship. I decided to head down to check out Sedona, and then head west to LA and up the coast.</p><p>A friend of mine, Jamie, <em>loves</em> Sedona, so I figured I'd see what the deal was. I … didn't see what the deal was. To be fair, COVID time is weird, and so I wasn't able to go to cool shops, or cool bars, or whatever else it is that she loves so much about it. So I'll have to head back some time we're on the other side of this and check it out again.</p><p>So I get through Sedona, and then, several hours later, I skirt Phoenix, and pass through San Bernadino, Pasadena, Los Angeles, Santa Barbara, and on to a rest area on Route 101 between Gaviota and Las Cruces. I found a good spot in the parking lot, pulled the comforter around me, and slept in the driver's seat for about six hours.</p><h2>Day Four: Up Route 1</h2><p>When I'd hit LA the night before, I had a few choices on route. Up the boring-but-straight-shot Route 5? Up the more-interesting-but-still-a-highway Route 101? Or the hug-the-coastline-and-pass-through-cute-small-towns-and-farms Route 1? Friends! We optimize for story around here! Up the 1 it was!</p><p>Sadly, I didn't get any photos of my trip up the 1. But it was a great trip, with a number of moments packed into the day:</p><ul><li>Watching the fog roll in over the hills outside of Lompoc.</li><li>Smelling something like jasmine mingling with the normal marine layer scents of eucalyptus, bay laurel, and coyote brush in the morning fog.</li><li>Getting an undrinkable push-button latte at a local donut store, and then redeeming it with an actual latte from Quintessa Coffee, outside Pismo Beach.</li><li>Passing a few previously-adventured locations, like Julia Pfeiffer Burns State Park (the trip that reinforced the value of Side Quests), or the old Coast Road that winds around from Big Sur up to the back side of the Bixby Canyon Bridge (I stayed on the 1 this time).</li><li>Getting a blackened snapper sandwich from the Seabright Deli in Santa Cruz for lunch.</li><li>Looking (unsuccessfully) for whales off the coast north of Santa Cruz.</li><li>Enjoying the contrast of a bright blue sky when the rest of SF was gray and overcast.</li></ul><p>Driving up the 1 was a lovely way to end the trip.</p><h2>What's Next?</h2><p>This was a great trip, and I'm glad I was able to finally make it happen.</p><p>My next solo adventure, I think, will be a circumambulation around Mt. Tam. I think about three days of hiking will let me more leisurely approach the trip, rather than blitzing through the locations like I did with this one. I have a bit of planning to do for it, but I think it could be an amazing few days.</p><p>And I'll hopefully have a better camera next time.</p>"
    },
  
    {
      "id": "https://charliepark.org/smartquotes_in_eleventy/",
      "url": "https://charliepark.org/smartquotes_in_eleventy/",
      "title": "serif: /smartquotes_in_eleventy/",
      "content_html": "<h1>Fun with RegExes (AKA: How to Get Smartquotes in Eleventy)</h1><aside style='background:#e5e5e5; border-radius: 1rem; padding: 1px 1rem;'><p>Per my note the other day about <a href='/tutorials_over_libraries/'>Tutorials Over Libraries</a>, I've got a runthrough of how I added smartquotes to Eleventy. I know regular expressions can be daunting and opaque, and I'd love to clarify what I did here. If anything in this is confusing, I promise it's not you. Regexes are squirrelly. If you have thoughts, please let me know! Similarly, I'm eager to learn where I can improve with regexes. Let me know if you have feedback!</p><p>As a caveat, I use the Nunjucks templating library, and this all works with it. It might work in other templating libraries, but I haven't tested it. If you try it in another library, please let me know how it goes!</p><p>I've set this post in a serif font so you can see the smartquotes more easily.</p></aside><p>I'm working on turning this tumblelog into a more fully-fleshed-out tool that anyone can use to quickly spin up a tumblelog of their own. One of the things I wanted to nail down was smartquotes.</p><p>Since — so far — this is just my personal blog, I've gone to the trouble of hand-typing all of the smartquotes in my posts. I know that's a bit excessive. How nice would it be, though, if you could just write regular quotes in Markdown, and if Eleventy would just <em>know</em> which quote to put down, and do it for you?</p><p>Before I get into that, a quick bit of background for those of you who aren't typography nerds.</p><h2>Smart whatnow?</h2><p>So if you look on your keyboard, just to the left of your <code>return</code> key, you'll see the key you'd press to add a single quotation mark (') or, with the <code>shift</code> key modifying it, a double quotation mark (&quot;).</p><p>In programs like Google Docs, the software typically converts those into &quot;smart&quot; (or &quot;curly&quot;) quotes for you. Smart quotes are the traditional way you'd see quotes when set in type, like in a book, magazine, etc.</p><p>There's a problem, though! By default, Eleventy doesn't change your quotes in Markdown files to smartquotes. So, unless you wrote each quotation mark in manually (<code>option</code> + <code>[</code> for left double quote, <code>shift</code> + <code>option</code> + <code>[</code> for right double quote, plus a similar process for apostrophes), you'd be left with straight quotes.</p><p>I haven't <em>minded</em> hand-writing them, but surely there's an easier way?</p><h2>Horrors. How do we fix it?</h2><p>Thankfully, Eleventy lets us run custom filters, which can process the files we're saving. We just have to create one that does what we want.</p><p>In our <code>.eleventy.js</code> file, we'll add a new filter, called &quot;smartquotes&quot;. Before we add anything in, it looks like this:</p><pre class='language-js'><code class='language-js'>eleventyConfig<span class='token punctuation'>.</span><span class='token function'>addFilter</span><span class='token punctuation'>(</span><span class='token string'>'smartquotes'</span><span class='token punctuation'>,</span> <span class='token punctuation'>(</span><span class='token parameter'>post</span><span class='token punctuation'>)</span> <span class='token operator'>=></span> <span class='token punctuation'>{</span> <span class='token keyword'>return</span> post<span class='token punctuation'>;</span> <span class='token punctuation'>}</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span></code></pre><p>And we'll call it in our main template file (like <code>index.njk</code>) like this:</p><pre class='language-js'><code class='language-js'><span class='token operator'>&lt;</span>main<span class='token operator'>></span><br>  <span class='token punctuation'>{</span><span class='token punctuation'>{</span> content <span class='token operator'>|</span> smartquotes <span class='token operator'>|</span> safe <span class='token punctuation'>}</span><span class='token punctuation'>}</span><br><span class='token operator'>&lt;</span><span class='token operator'>/</span>main<span class='token operator'>></span><br></code></pre><p>(Normally, it'd just say <code>content | safe</code>, without the <code>smartquotes</code> bit in the middle.)</p><p>Okay. Now we basically need to add some regular expressions to swap out our various quotation marks.</p><h3>Regular &quot;double&quot; quotes</h3><p>Nunjucks converts normal double quotes (that aren't inside a <code>&lt;code&gt;</code> block) into <code>&amp;quot;</code>, so we're going to want to add a find-and-replace regular expression looking for that string.</p><pre class='language-js'><code class='language-js'><span class='token keyword'>const</span> openDoubles <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*)(?&lt;=\\s|>)&amp;quot;/g</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br><span class='token keyword'>const</span> closeDoubles <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*“.*)&amp;quot;(?=(\\s|\\p{P}|&lt;))/gu</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span></code></pre><p>If you aren't familiar with regular expressions, that syntax can look kind of strange. Here's what it means:</p><p><code>?&lt;=(…)</code>: This is a &quot;lookbehind&quot; command. Basically: make sure that the sequence inside the parentheses occurs before the thing we're looking for.</p><p><code>&lt;(h|l|p[^r])</code>: This is the sequence inside the parentheses. We need to see an angle bracket with either an <code>h</code>, an <code>l</code>, or a <code>p</code> (but not <code>pr</code>, as we <em>don't</em> want to match <code>&lt;pre&gt;</code> blocks). (The <code>h</code> is for <code>h1</code>s, <code>h2</code>s, etc. The <code>l</code> is for <code>label</code> and <code>li</code> elements. The <code>p</code> is for <code>p</code> tags. We can add more if we like, but these were a good starting point.) (I tried a negative lookbehind, but the variations I tried kept breaking my test cases, so I've kept it like this for now.)</p><p><code>.*</code>: There can be characters between the thing we've already said we're looking for and the next part of the regex.</p><p><code>(?&lt;=\\s|&gt;)</code>: Another lookbehind! This is what we need to see immediately before the thing we're looking for. Either a whitespace character or a closing angle bracket. (Remember, Eleventy is just going to be parsing the text of the file, so it'll treat it as a string, not as an HTML node.) By including this as a lookbehind, we simplify our <code>replace()</code> call, which we'll get to in a second. (Otherwise, we'd need to include a &quot;capture group&quot; in the <code>replace()</code>. Don't worry. We'll get to capture groups in a second.</p><p><code>$quot;</code>: The thing we're looking for!</p><p>Okay. That was <code>openDoubles</code>. What about <code>closeDoubles</code>?</p><p>Some of this might look familiar. Try to parse it before I tell you what's what.</p><p><code>(?&lt;=“.*)&amp;quot;(?=(\\s|\\p{P}|&lt;))</code></p><p>Okay. Here's what's what.</p><p><code>(?&lt;=“.*)</code>: Another lookbehind. This time, we need to see an open quote <code>“</code> followed by any number of characters. (We know we'll have open quotes available because we'll run the <code>openQuotes</code> replacement before running the <code>closeQuotes</code> replacement.</p><p><code>&amp;quot;</code>: Again, the thing we're looking for.</p><p><code>(?=(…))</code>: This is a &quot;lookahead&quot; command. The string of text needs to include whatever's inside the parentheses, but only <em>after</em> the thing we're looking for.</p><p><code>\\s|\\p{P}|&lt;</code>: This is what's inside the lookahead section. Whitespace (<code>\\s</code>), or a punctuation mark (<code>\\p{P}</code>), or a left-hand angle bracket (<code>&lt;</code>). Note that for that <code>\\p{P}</code> part to work, we need to tell the regex that we're including some unicode instructions. We do that with the <code>u</code> flag at the end of it (look back up at the code block at the top of this section, and find the <code>/gu</code>.)</p><p>Okay, great. What do we do with those two <code>const</code>s?</p><p>We add them in to the return statement, calling <code>replace()</code> on the <code>post</code> string:</p><pre class='language-js'><code class='language-js'>eleventyConfig<span class='token punctuation'>.</span><span class='token function'>addFilter</span><span class='token punctuation'>(</span><span class='token string'>'smartquotes'</span><span class='token punctuation'>,</span> <span class='token punctuation'>(</span><span class='token parameter'>post</span><span class='token punctuation'>)</span> <span class='token operator'>=></span> <span class='token punctuation'>{</span><br>  <span class='token keyword'>const</span> openDoubles <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*)(?&lt;=\\s|>)&amp;quot;/g</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>const</span> closeDoubles <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*“.*)&amp;quot;(?=(\\s|\\p{P}|&lt;))/gu</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>return</span> post<br>    <span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>openDoubles<span class='token punctuation'>,</span> <span class='token string'>'“'</span><span class='token punctuation'>)</span><span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>closeDoubles<span class='token punctuation'>,</span> <span class='token string'>'”'</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br><span class='token punctuation'>}</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span></code></pre><p>Okay, so! We got our double quotes taken care of.</p><h3>Regular 'single' quotes</h3><p>Like the double quotes, we'll need to put together some regular expressions to get the single quotes.</p><p>This should look kind of familiar:</p><pre class='language-js'><code class='language-js'><span class='token keyword'>const</span> openSingles <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*)(?&lt;=\\s|>)'/g</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br><span class='token keyword'>const</span> closeSingles <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*‘.*)'(?=(\\s|\\p{P}|&lt;))/gu</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span></code></pre><p>See if you can read through that line and figure out what each one does. If you need help, look up at the section before this.</p><p>It's actually exactly the same, except we're looking for the straight single quote <code>'</code> instead of the string <code>&amp;quot;</code>.</p><p>The only difference on the <code>replace()</code> call is that we'll use smart single quotes:</p><pre class='language-js'><code class='language-js'><span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>openSingles<span class='token punctuation'>,</span> <span class='token string'>'‘'</span><span class='token punctuation'>)</span><span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>closeSingles<span class='token punctuation'>,</span> <span class='token string'>'’'</span><span class='token punctuation'>)</span></code></pre><p>So now our full filter looks like this:</p><pre class='language-js'><code class='language-js'>eleventyConfig<span class='token punctuation'>.</span><span class='token function'>addFilter</span><span class='token punctuation'>(</span><span class='token string'>'smartquotes'</span><span class='token punctuation'>,</span> <span class='token punctuation'>(</span><span class='token parameter'>post</span><span class='token punctuation'>)</span> <span class='token operator'>=></span> <span class='token punctuation'>{</span><br>  <span class='token keyword'>const</span> openDoubles <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*)(?&lt;=\\s|>)&amp;quot;/g</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>const</span> closeDoubles <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*“.*)&amp;quot;(?=(\\s|\\p{P}|&lt;))/gu</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>const</span> openSingles <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/((?&lt;=&lt;(h|l|p[^r]).*)(?&lt;=\\s|>)|\\n)'/g</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>const</span> closeSingles <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*‘.*)'(?=(\\s|\\p{P}|&lt;))/gu</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>return</span> post<br>    <span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>openDoubles<span class='token punctuation'>,</span> <span class='token string'>'“'</span><span class='token punctuation'>)</span><span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>closeDoubles<span class='token punctuation'>,</span> <span class='token string'>'”'</span><span class='token punctuation'>)</span><br>    <span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>openSingles<span class='token punctuation'>,</span> <span class='token string'>'‘'</span><span class='token punctuation'>)</span><span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>closeSingles<span class='token punctuation'>,</span> <span class='token string'>'’'</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br><span class='token punctuation'>}</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span></code></pre><p>Okay, great. So that's single and double quotes. We haven't gotten apostrophes set, yet. Let's do that next.</p><h3>Apostrophes</h3><p>Apostrophes are pretty straightforward. A &quot;word boundary&quot; (0-9, a-z, A-Z, or the underscore character, represented by <code>\\b</code>), then an apostrophe, then another &quot;word boundary&quot;. This will pick up things like can't, they're, it's, and so on.</p><pre class='language-js'><code class='language-js'><span class='token keyword'>const</span> apostrophes <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*)\\b'\\b/g</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span></code></pre><p>We're going to want to run the apostrophes <em>before</em> replacing the double and single quote replacements. We could probably do it after, but this feels cleaner to me.</p><p>As before, we keep building up our string manipulation:</p><pre class='language-js'><code class='language-js'>eleventyConfig<span class='token punctuation'>.</span><span class='token function'>addFilter</span><span class='token punctuation'>(</span><span class='token string'>'smartquotes'</span><span class='token punctuation'>,</span> <span class='token punctuation'>(</span><span class='token parameter'>post</span><span class='token punctuation'>)</span> <span class='token operator'>=></span> <span class='token punctuation'>{</span><br>  <span class='token keyword'>const</span> apostrophes <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*)\\b'\\b/g</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>const</span> openDoubles <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*)(?&lt;=\\s|>)&amp;quot;/g</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>const</span> closeDoubles <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*“.*)&amp;quot;(?=(\\s|\\p{P}|&lt;))/gu</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>const</span> openSingles <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/((?&lt;=&lt;(h|l|p[^r]).*)(?&lt;=\\s|>)|\\n)'/g</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>const</span> closeSingles <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*‘.*)'(?=(\\s|\\p{P}|&lt;))/gu</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>return</span> post<br>    <span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>apostrophes<span class='token punctuation'>,</span> <span class='token string'>'’'</span><span class='token punctuation'>)</span><br>    <span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>openDoubles<span class='token punctuation'>,</span> <span class='token string'>'“'</span><span class='token punctuation'>)</span><span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>closeDoubles<span class='token punctuation'>,</span> <span class='token string'>'”'</span><span class='token punctuation'>)</span><br>    <span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>openSingles<span class='token punctuation'>,</span> <span class='token string'>'‘'</span><span class='token punctuation'>)</span><span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>closeSingles<span class='token punctuation'>,</span> <span class='token string'>'’'</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br><span class='token punctuation'>}</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span></code></pre><p>Are we good, then?</p><p>Not yet!</p><h3>Abbreviated years</h3><p>Believe it or not, the apostrophe in shortened years is supposed to point to the left. That is, the &quot;pointy bit&quot; of the quotation mark always points to the thing that got removed. So if you shorten &quot;2020&quot;, you'd want it to look like '20, not ‘20.</p><p>So how do we do that?</p><p>We want to capture a single quote sandwiched between a whitespace character and a digit. There are two ways we could do this. First, let's look at a &quot;capture group&quot;:</p><pre class='language-js'><code class='language-js'><span class='token keyword'>const</span> years <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(\\s)'(\\d)/g</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span></code></pre><p>Those parentheses indicate &quot;capture groups&quot;. When we run the <code>replace()</code> function, we'll use the capture groups to insert the proper values back in. <code>$1</code> is the first capture group's contents. <code>$2</code> is the second.</p><pre class='language-js'><code class='language-js'><span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>years<span class='token punctuation'>,</span> <span class='token string'>'$1’$2'</span><span class='token punctuation'>)</span></code></pre><p>&quot;But wait,&quot; you say. &quot;We didn't pass in capture group variables for the &quot;word boundaries&quot; (<code>\\b</code>) earlier. Why not?</p><p>It turns out that the <code>\\b</code> marker doesn't actually match any characters. It just marks that liminal space between the word and the not-word.</p><p>An alternate method is just like the earlier &quot;lookbehind&quot; and &quot;lookahead&quot; approaches:</p><pre class='language-js'><code class='language-js'><span class='token keyword'>const</span> years <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=\\s)'(?=\\d)/g</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span></code></pre><p>And the <code>.replace()</code> call would be just the smart quote — no capture group variables.</p><pre class='language-js'><code class='language-js'><span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>years<span class='token punctuation'>,</span> <span class='token string'>'’'</span><span class='token punctuation'>)</span></code></pre><p>We will definitely want to run that one before the <code>openSingles</code> replacement, so those quotes get switched over and aren't caught by the later replacement.</p><p>At the risk of being repetitive, here's what our <code>smartquotes</code> filter looks like at this point:</p><pre class='language-js'><code class='language-js'>eleventyConfig<span class='token punctuation'>.</span><span class='token function'>addFilter</span><span class='token punctuation'>(</span><span class='token string'>'smartquotes'</span><span class='token punctuation'>,</span> <span class='token punctuation'>(</span><span class='token parameter'>post</span><span class='token punctuation'>)</span> <span class='token operator'>=></span> <span class='token punctuation'>{</span><br>  <span class='token keyword'>const</span> apostrophes <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*)\\b'\\b/g</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>const</span> years <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=\\s)'(?=\\d)/g</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>const</span> openDoubles <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*)(?&lt;=\\s|>)&amp;quot;/g</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>const</span> closeDoubles <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*“.*)&amp;quot;(?=(\\s|\\p{P}|&lt;))/gu</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>const</span> openSingles <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/((?&lt;=&lt;(h|l|p[^r]).*)(?&lt;=\\s|>)|\\n)'/g</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>const</span> closeSingles <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*‘.*)'(?=(\\s|\\p{P}|&lt;))/gu</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>return</span> post<br>    <span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>apostrophes<span class='token punctuation'>,</span> <span class='token string'>'’'</span><span class='token punctuation'>)</span><span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>years<span class='token punctuation'>,</span> <span class='token string'>'’'</span><span class='token punctuation'>)</span><br>    <span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>openDoubles<span class='token punctuation'>,</span> <span class='token string'>'“'</span><span class='token punctuation'>)</span><span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>closeDoubles<span class='token punctuation'>,</span> <span class='token string'>'”'</span><span class='token punctuation'>)</span><br>    <span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>openSingles<span class='token punctuation'>,</span> <span class='token string'>'‘'</span><span class='token punctuation'>)</span><span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>closeSingles<span class='token punctuation'>,</span> <span class='token string'>'’'</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br><span class='token punctuation'>}</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span></code></pre><p>Okay, great! Surely there aren't any edge cases?</p><p>Oh, but there are.</p><h3>Edge cases — slang and Hawai'i</h3><p>As we just saw in <code>years</code>, the &quot;pointy bit&quot; of the quotation mark points at the elided content.</p><p>When &quot;them&quot; gets cut down to &quot;em&quot;, or &quot;it was&quot; gets smushed into &quot;twas&quot;, we want the quotation marks pointing at the beginning of the word: 'cause, 'em, 'til, 'twas.</p><p>Fortunately, there aren't <em>that</em> many special cases, so for now I've hardcoded them. Odds are good I've missed a few. Please feel free to ping me and let me know!</p><pre class='language-js'><code class='language-js'><span class='token keyword'>const</span> slang <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/'(cause|em|til|twas)/g</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span></code></pre><p>We also have an interesting case where — in the Hawaiian language — the official name of their land is Hawai'i. The character in between the two <code>i</code>s is called an 'okina, and it's a diacritic that indicates a glottal stop. When writing an 'okina, the &quot;pointy bit&quot; points up — instead of down — regardless of where it occurs in a word. (<a href='https://en.wikipedia.org/wiki/Hawaii#Etymology'>You can read more on the 'okina over at Wikipedia.</a>)</p><p>The 'okina is technically present in many Hawaiian words, like Oʻahu or Kauaʻi, but it usually gets dropped when the words are being written in English. In fact, the actual name of the US state is &quot;Hawaii&quot; — no 'okina. This filter catches Hawai'i, but doesn't attempt to catch all Hawaiian words with 'okinas. (My assumption is that if you're paying attention to 'okinas, you're going to be hardcoding them in anyway.)</p><pre class='language-js'><code class='language-js'><span class='token keyword'>const</span> hawaii <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*)Hawai'i/g</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span></code></pre><p>And with that, for now, we've got our filter.</p><h2>The final filter</h2><p>Here's what goes in your .eleventy.js file:</p><pre class='language-js'><code class='language-js'>eleventyConfig<span class='token punctuation'>.</span><span class='token function'>addFilter</span><span class='token punctuation'>(</span><span class='token string'>'smartquotes'</span><span class='token punctuation'>,</span> <span class='token punctuation'>(</span><span class='token parameter'>post</span><span class='token punctuation'>)</span> <span class='token operator'>=></span> <span class='token punctuation'>{</span><br>  <span class='token keyword'>const</span> hawaii <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*)Hawai'i/g</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>const</span> slang <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/'(cause|em|til|twas)/g</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>const</span> apostrophes <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*)\\b'\\b/g</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>const</span> years <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=\\s)'(?=\\d)/g</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>const</span> openDoubles <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*)(?&lt;=\\s|>)&amp;quot;/g</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>const</span> closeDoubles <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*“.*)&amp;quot;(?=(\\s|\\p{P}|&lt;))/gu</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>const</span> openSingles <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*)(?&lt;=\\s|>)'/g</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>const</span> closeSingles <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>RegExp</span><span class='token punctuation'>(</span><span class='token regex'>/(?&lt;=&lt;(h|l|p[^r]).*‘.*)'(?=(\\s|\\p{P}|&lt;))/gu</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>return</span> post<br>    <span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>hawaii<span class='token punctuation'>,</span> <span class='token string'>'Hawaiʻi'</span><span class='token punctuation'>)</span><span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>slang<span class='token punctuation'>,</span> <span class='token string'>'’$1'</span><span class='token punctuation'>)</span><br>    <span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>apostrophes<span class='token punctuation'>,</span> <span class='token string'>'’'</span><span class='token punctuation'>)</span><span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>years<span class='token punctuation'>,</span> <span class='token string'>'’'</span><span class='token punctuation'>)</span><br>    <span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>openDoubles<span class='token punctuation'>,</span> <span class='token string'>'“'</span><span class='token punctuation'>)</span><span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>closeDoubles<span class='token punctuation'>,</span> <span class='token string'>'”'</span><span class='token punctuation'>)</span><br>    <span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>openSingles<span class='token punctuation'>,</span> <span class='token string'>'‘'</span><span class='token punctuation'>)</span><span class='token punctuation'>.</span><span class='token function'>replace</span><span class='token punctuation'>(</span>closeSingles<span class='token punctuation'>,</span> <span class='token string'>'’'</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br><span class='token punctuation'>}</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span></code></pre><p>And, then, like I said up top, the &quot;content&quot; part of your <code>index.njk</code> file should look something like this:</p><pre class='language-js'><code class='language-js'><span class='token operator'>&lt;</span>main<span class='token operator'>></span><br>  <span class='token punctuation'>{</span><span class='token punctuation'>{</span> content <span class='token operator'>|</span> smartquotes <span class='token operator'>|</span> safe <span class='token punctuation'>}</span><span class='token punctuation'>}</span><br><span class='token operator'>&lt;</span><span class='token operator'>/</span>main<span class='token operator'>></span><br></code></pre><h2>A few tests:</h2><p>Abbreviated years work: '97, '01, '04, '07.</p><p>Apostrophes and contractions work: I can't wait to see if anyone actually uses this. If you've got suggestions or improvements, please shoot me a note.</p><p>Quotes work: &quot;I just don't think I have it in me,&quot; said the dog that definitely didn't eat the bacon off the countertop, no siree.</p><p>&quot;Quotes&quot; should &quot;work&quot;: even when there are multiple &quot;quotes&quot; per &quot;line&quot;.</p><p>Internal quotes work, even with curious punctuation: &quot;She didn't say '<em>You</em> did this'! She said '<em>Hugh</em> did this'!&quot;</p><p>'single quotes' 'work', at the 'beginning', 'middle', and 'end'</p><p>&quot;So do&quot; &quot;double&quot; &quot;quotes.&quot;</p><pre>But not inside 'pre' blocks, or in multi-line code blocks:</pre><pre class='language-js'><code class='language-js'><span class='token operator'>&lt;</span>code<span class='token operator'>></span><br>  These should <span class='token operator'>*</span>not<span class='token operator'>*</span> be <span class='token string'>'smart'</span><span class='token punctuation'>.</span><br><span class='token operator'>&lt;</span><span class='token operator'>/</span>code<span class='token operator'>></span></code></pre><p>Oh, and thanks to how Nunjucks and Eleventy process HTML, if we have some hardcoded HTML with a class or an inline style — <span class='highlight'>like this one</span> — the quote marks inside the brackets won't get messed up, and your HTML will still work as expected.</p>"
    },
  
    {
      "id": "https://charliepark.org/json_feeds/",
      "url": "https://charliepark.org/json_feeds/",
      "title": "text: /json_feeds/",
      "content_html": "<h1>JSON Feeds in Eleventy</h1><p>I’ve wanted to set up an RSS/JSON feed for this tumblelog for a little bit, but hadn’t made the time. I just took care of it, and it was really straightforward.</p><p>I started with <a href='https://piccalil.li/quick-tip/create-a-json-feed-with-11ty/'>Andy Bell’s quick intro on making a JSON Feed in Eleventy</a>, but then made some modifications to help it conform more to <a href='https://jsonfeed.org/'>the JSON Feed spec</a>.</p><p>Here’s what I ended up with, in a file called <code>feed.njk</code> in my root directory:</p><pre class='language-js'><code class='language-js'><span class='token operator'>--</span><span class='token operator'>-</span><br>permalink<span class='token operator'>:</span> <span class='token string'>'/feed.json'</span><br><span class='token operator'>--</span><span class='token operator'>-</span><br><span class='token punctuation'>{</span><br>  <span class='token string'>'version'</span><span class='token operator'>:</span> <span class='token string'>'https://jsonfeed.org/version/1.1'</span><span class='token punctuation'>,</span><br>  <span class='token string'>'title'</span><span class='token operator'>:</span> <span class='token string'>'Charlie Park!'</span><span class='token punctuation'>,</span><br>  <span class='token string'>'home_page_url'</span><span class='token operator'>:</span> <span class='token string'>'https://charliepark.org/'</span><span class='token punctuation'>,</span><br>  <span class='token string'>'feed_url'</span><span class='token operator'>:</span> <span class='token string'>'https://charliepark.org/feed.json'</span><span class='token punctuation'>,</span><br>  <span class='token string'>'icon'</span><span class='token operator'>:</span> <span class='token string'>'https://charliepark.org/images/arrow_for_feed.jpg'</span><span class='token punctuation'>,</span><br>  <span class='token string'>'favicon'</span><span class='token operator'>:</span> <span class='token string'>'https://charliepark.org/favicon.ico'</span><span class='token punctuation'>,</span><br>  <span class='token string'>'language'</span><span class='token operator'>:</span> <span class='token string'>'en-US'</span><span class='token punctuation'>,</span><br>  <span class='token string'>'items'</span><span class='token operator'>:</span> <span class='token punctuation'>[</span><br>  <span class='token punctuation'>{</span><span class='token operator'>%</span> <span class='token keyword'>for</span> item <span class='token keyword'>in</span> collections<span class='token punctuation'>.</span>post <span class='token operator'>|</span> reverse <span class='token operator'>%</span><span class='token punctuation'>}</span><br>    <span class='token punctuation'>{</span><br>      <span class='token string'>'id'</span><span class='token operator'>:</span> <span class='token string'>'https://charliepark.org{{ item.url }}'</span><span class='token punctuation'>,</span><br>      <span class='token string'>'url'</span><span class='token operator'>:</span> <span class='token string'>'https://charliepark.org{{ item.url }}'</span><span class='token punctuation'>,</span><br>      <span class='token string'>'title'</span><span class='token operator'>:</span> <span class='token string'>'{{ item.data.type }}: {{ item.url }}'</span><span class='token punctuation'>,</span><br>      <span class='token string'>'content_html'</span><span class='token operator'>:</span> <span class='token string'>'{{ item.templateContent | replace(stet'stet'</span>stet'stet<span class='token punctuation'>,</span> <span class='token string'>'\\''</span><span class='token punctuation'>)</span> <span class='token operator'>|</span> <span class='token function'>replace</span><span class='token punctuation'>(</span><span class='token string'>'\\n'</span><span class='token punctuation'>,</span> <span class='token string'>''</span><span class='token punctuation'>)</span> <span class='token operator'>|</span> <span class='token function'>replace</span><span class='token punctuation'>(</span><span class='token string'>'\\\\'</span><span class='token punctuation'>,</span> <span class='token string'>'\\\\\\\\'</span><span class='token punctuation'>)</span> <span class='token operator'>|</span> safe <span class='token punctuation'>}</span><span class='token punctuation'>}</span>'<br>    <span class='token punctuation'>}</span><span class='token punctuation'>{</span><span class='token operator'>%</span> <span class='token keyword'>if</span> not loop<span class='token punctuation'>.</span>last <span class='token operator'>%</span><span class='token punctuation'>}</span><span class='token punctuation'>,</span><span class='token punctuation'>{</span><span class='token operator'>%</span> endif <span class='token operator'>%</span><span class='token punctuation'>}</span><br>  <span class='token punctuation'>{</span><span class='token operator'>%</span> endfor <span class='token operator'>%</span><span class='token punctuation'>}</span><br>  <span class='token punctuation'>]</span><br><span class='token punctuation'>}</span><br></code></pre><p>That string of <code>replace()</code>s in the last line of the for loop is to handle some string transformations so that the post content better functions with the JSON spec. Since I use smart quotes in my posts, it won’t mess up my quotation marks. Just be aware that you might need to keep an eye out on those.</p>"
    },
  
    {
      "id": "https://charliepark.org/fern/",
      "url": "https://charliepark.org/fern/",
      "title": "image: /fern/",
      "content_html": "<p><img src='/images/fern.jpg' alt='Our dog, Fern, looking noble.'></p><p>Fern is a very good girl.</p>"
    },
  
    {
      "id": "https://charliepark.org/tutorials_over_libraries/",
      "url": "https://charliepark.org/tutorials_over_libraries/",
      "title": "text: /tutorials_over_libraries/",
      "content_html": "<h1>Tutorials Over Libraries</h1><p>Andy Bell published a new tutorial today, on <a href='https://piccalil.li/tutorial/build-a-responsive-media-browser-with-css/'>how to build a responsive media browser with CSS</a>. It’s a great runthrough of how he did it, and I especially like his 16:9 aspect ratio trick for the media object. It’s clever, while still being clear — a line that’s surprisingly hard for many developers to walk. And Andy does a great job talking through some of the reasoning behind different decisions, like some choices he made in the service of universal design.</p><p>So the article’s great, but what I really want to write about here is how much I appreciate that he wrote it up as a <em>tutorial</em> and not as a <em>library</em>.</p><p>An aspect of “the old web” that I miss is people writing up how they solved different technical challenges. I’m guilty of this, too. To be sure, people still do write things up, but it seems like it’s far more common for people to create a JavaScript module and to release it on NPM these days. “Hey, world. Here’s a ready-to-go responsive media browser! I’ve hidden the complicated parts so you don’t need to worry about them.”</p><p>Matthew Crawford — motorcycle mechanic and philosophy/sociology research fellow at UVA — talks about this principle (and how damaging it can be) a fair amount in his book <em>Shop Class As Soul Craft</em>. In his case, he talks about the evolution of the dipstick in the car. When cars first came out, you couldn’t own one unless you knew how the internal parts worked together. Over time, car mechanics began to take on that work, and car owners only needed to check their engine oil level every once in a while. Then came the “check engine” light. Later, the OBD-II monitor, which required not only specialized knowledge, but specialized hardware and software. Ultimately, some cars didn’t even have a dipstick accessible to the owner, and it could only be serviced by taking it in to the dealer. (Rent-seeking isn’t only present in the SaaS world.)</p><p><em>Yes</em>, being freed from having to deal with “the complicated parts” meant that people were freed to do other (presumably more valuable) things with their time. And there’s something to be said for an external library that’s properly tested versus your own homespun version. But that external reliance comes at a cost of knowing your own tools and honing your craft. Of understanding the bespoke decisions that go into developing the particular thing you’re making, and of learning about both common pitfalls and edge cases to account for. Of knowing how to fix things when the externally-provided library doesn’t work any longer.</p><p>So I think there’s a lot to be said for getting your hands dirty and — yes — duplicating work that others have done.</p><p>Tutorials, like the one that Andy wrote, are one of the best things about the web, and are so much richer than a comparable package/module/component. I’d love to see more people writing up their processes, and showing off how they build things. And, ultimately, showing the rest of us how we, too, can build something similar.</p>"
    },
  
    {
      "id": "https://charliepark.org/make_that_dream_a_reality/",
      "url": "https://charliepark.org/make_that_dream_a_reality/",
      "title": "quote: /make_that_dream_a_reality/",
      "content_html": "<p>Think of all the time and energy we all must presently devote to the outbursts driven by Trump’s bottomless appetite for attention. Imagine having that psychic burden lifted. Envision the name Trump appearing only in the headlines of below-the-fold stories about criminal investigations and civil lawsuits. Now vote, and make that dream a reality.</p><p>Eugene Robinson — <a href='https://www.washingtonpost.com/opinions/imagine-what-it-will-be-like-to-never-have-to-think-about-trump-again/2020/10/01/d0b32de0-0413-11eb-a2db-417cddf4816a_story.html?utm_source=rss&amp;utm_medium=referral&amp;utm_campaign=wp_opinions'>Imagine what it will be like to never have to think about Trump again</a></p>"
    },
  
    {
      "id": "https://charliepark.org/america_is_doomed_the_musical/",
      "url": "https://charliepark.org/america_is_doomed_the_musical/",
      "title": "video: /america_is_doomed_the_musical/",
      "content_html": "<iframe title='New York Times Video - Embed Player' width='480' height='321' frameborder='0' scrolling='no' allowfullscreen='true' marginheight='0' marginwidth='0' id='nyt_video_player' src='https://www.nytimes.com/video/players/offsite/index.html?videoId=100000007370133'></iframe><p>Was just wondering last week about the Gregory Brothers and what they’re up to these days. Here we go.</p>"
    },
  
    {
      "id": "https://charliepark.org/voting_cheatsheet/",
      "url": "https://charliepark.org/voting_cheatsheet/",
      "title": "text: /voting_cheatsheet/",
      "content_html": "<h1>SF Voting Cheatsheet</h1><p>I’m a big fan of <a href='http://www.theleaguesf.org'>The League of Pissed Off Voters</a> and the guides they make each year. They have a more comprehensive guide on the way, but they’ve posted a <a href='http://www.theleaguesf.org/november_2020_cheat_sheet'>cheatsheet</a> in case you’re voting early.</p><p>I look forward to their more nuanced writeups on some of the propositions, but it’s good to have a general sense of their positions. I’m really hoping folks in District 1 pay attention and vote for <a href='conniechansf.com/'>Connie Chan</a>.</p>"
    },
  
    {
      "id": "https://charliepark.org/coaching/",
      "url": "https://charliepark.org/coaching/",
      "title": "text: /coaching/",
      "content_html": "<h1>Get You a Coach for Great Good!</h1><p>So I’ve benefitted greatly from working with a therapist over the last year. (<a href='https://www.golodner.com/'>This is mine.</a>) He asks great questions, has helped me better understand both myself and my relationships, and has helped me train my ability to get work done more effectively. I highly recommend working with a therapist or coach if you can.</p><p>A good friend of mine is also an excellent coach, and has recently opened up a few slots for new clients. If you’re interested, she’ll give you a free session to see if you click. You can check her out and sign up for a free session here: <a href='https://www.lane.coach/'>Coaching With Lane</a>. It’s kind of incredible how insightful she is, and how quickly she picks up on little things you say / don’t say, and follows up with just the right amount of curiosity to make you pause, reflect, and open a new door of understanding. It’s pretty wild, to be honest.</p><p>If you’ve been thinking about finding a coach, but have been waiting for a sign, consider this the sign and check out her coaching. There are few uses of your precious time that’ll be more useful than reaching out to see if she can help you get unstuck.</p>"
    },
  
    {
      "id": "https://charliepark.org/no_place_on_earth/",
      "url": "https://charliepark.org/no_place_on_earth/",
      "title": "quote: /no_place_on_earth/",
      "content_html": "<p>There is no place on earth so beautiful as Tamalpaias.</p><p>Robert Louis Stevenson, from the top of Mount Tam</p>"
    },
  
    {
      "id": "https://charliepark.org/twilight_in_the_wilderness/",
      "url": "https://charliepark.org/twilight_in_the_wilderness/",
      "title": "image: /twilight_in_the_wilderness/",
      "content_html": "<p><img src='/images/twilight_in_the_wilderness.jpg' alt='A painting of a sun setting over a river, with a mountain in the distance. The clouds are illuminated in reds and blues.'></p><p>Frederic Edwin Church — <em>Twilight in the Wilderness</em></p>"
    },
  
    {
      "id": "https://charliepark.org/the_machine/",
      "url": "https://charliepark.org/the_machine/",
      "title": "quote: /the_machine/",
      "content_html": "<p>In the first chapter, a disagreement develops between the narrator and his riding companions, John and Sylvia, over the question of motorcycle maintenance. Robert performs his own maintenance, while John and Sylvia insist on having a professional do it. This posture of non-involvement, we soon learn, is a crucial element of their countercultural sensibility. They seek escape from “the whole organized bit” or “the system,” as the couple puts it; technology is a death force, and the point of hitting the road is to leave it behind. The solution, or rather evasion, that John and Sylvia hit on for managing their revulsion at technology is to “Have it somewhere else. Don’t have it here.” The irony is they still find themselves entangled with The Machine—the one they sit on.</p><p>Today, we often use “technology” to refer to systems whose inner workings are assiduously kept out of view, magical devices that offer no apparent friction between the self and the world, no need to master the grubby details of their operation. The manufacture of our smartphones, the algorithms that guide our digital experiences from the cloud—it all takes place “somewhere else,” just as John and Sylvia wished.</p><p>Yet lately we have begun to realize that this very opacity has opened new avenues of surveillance and manipulation. Big Tech now orders everyday life more deeply than John and Sylvia imagined in their techno-dystopian nightmare. Today, a road trip to “get away from it all” would depend on GPS, and would prompt digital ads tailored to our destination. The whole excursion would be mined for behavioral data and used to nudge us into profitable channels, likely without our even knowing it.</p><p>Matthew Crawford, <em><a href='https://www.smithsonianmag.com/smithsonian-institution/robert-pirsig-zen-art-motorcycle-maintenance-resonates-today-180975768/'>Why Robert Pirsig’s ‘Zen and the Art of Motorcycle Maintenance’ Still Resonates Today</a></em></p>"
    },
  
    {
      "id": "https://charliepark.org/he_will_never_concede/",
      "url": "https://charliepark.org/he_will_never_concede/",
      "title": "quote: /he_will_never_concede/",
      "content_html": "<p>Let us not hedge about one thing. Donald Trump may win or lose, but he will never concede. Not under any circumstance. Not during the Interregnum and not afterward. If compelled in the end to vacate his office, Trump will insist from exile, as long as he draws breath, that the contest was rigged.</p><p>Trump’s invincible commitment to this stance will be the most important fact about the coming Interregnum. It will deform the proceedings from beginning to end. We have not experienced anything like it before.</p><p><a href='https://www.theatlantic.com/magazine/archive/2020/11/what-if-trump-refuses-concede/616424/'>The Election That Could Break America</a></p>"
    },
  
    {
      "id": "https://charliepark.org/mackenzie_time_inventory/",
      "url": "https://charliepark.org/mackenzie_time_inventory/",
      "title": "text: /mackenzie_time_inventory/",
      "content_html": "<h1>The Mackenzie Time Inventory</h1><p>In the management classic <em>The Time Trap</em>, R. Alec Mackenzie has several solid recommendations, including getting a sense of where your time goes. He recommends creating and using a time inventory:</p><blockquote><p>From the earliest efforts to log their time, executives have found that their time allotments were not going where they thought they were. …</p><p>Peter Drucker’s remarks about the time log are enlightening. He observes that approaches to getting more work done always begin with planning. However, effective executives do not start this way. They know that if you start with a plan, it ends up in the bottom drawer. Other plans will follow, winding up in the same place. Instead, according to Drucker, <strong>the astute executive begins by finding out where [their] time is really going.</strong></p><p>The time inventory, or log, is necessary because <strong>the painful task of changing our habits requires far more conviction than we can build from learning about the experience of others.</strong> We need the amazing revelation of the great portions of time we are wasting to provide the determination to manage ourselves more effectively in this respect.</p></blockquote><p>In the book, Mackenzie lays out a chart that you can use to log your time. It wasn’t a bad layout for 1972, but as we have some more tools at our disposal, I figured it’d make for a solid spreadsheet.</p><p>So! I made one, using Google Sheets. If you’re interested, you can copy (and use) <a href='https://docs.google.com/spreadsheets/d/1fpmrTxIEv4ZF6kVMSo4OJbWVefulFR-vcgQ2IbcSSk8/edit?usp=sharing'>The Mackenzie Time Inventory</a>.</p><p>Let me know if you use it, and how it could be improved!</p>"
    },
  
    {
      "id": "https://charliepark.org/the_right_thing/",
      "url": "https://charliepark.org/the_right_thing/",
      "title": "quote: /the_right_thing/",
      "content_html": "<p>If doing the right thing were always easy, there wouldn’t be so many people doing the wrong things. Doing the right thing even when it has negative personal consequences is the mark of good character.</p><p><a href='https://www.reddit.com/r/relationship_advice/comments/ixplv5/updatemy26m_brother29m_is_married_to_and_cheating/g685sh7/'>jimmyjrdanceparty</a></p>"
    },
  
    {
      "id": "https://charliepark.org/the_has_selector/",
      "url": "https://charliepark.org/the_has_selector/",
      "title": "text: /the_has_selector/",
      "content_html": "<p>No browsers support it yet, but there’s a useful pseudo-class in the CSS spec that I just stumbled on: <code>:has()</code></p><p>Say you have a style that applies to links, but you don’t want it to apply to links when they contain an image (like an image that links to a gallery). You could do something like this:</p><pre class='language-css'><code class='language-css'><span class='token selector'>a</span> <span class='token punctuation'>{</span> <span class='token property'>border-bottom</span><span class='token punctuation'>:</span> 1px solid #000 <span class='token punctuation'>}</span><br><span class='token selector'>a:has(img)</span> <span class='token punctuation'>{</span> <span class='token property'>border</span><span class='token punctuation'>:</span> none <span class='token punctuation'>}</span></code></pre>"
    },
  
    {
      "id": "https://charliepark.org/adhd_wearables/",
      "url": "https://charliepark.org/adhd_wearables/",
      "title": "text: /adhd_wearables/",
      "content_html": "<p>So this is pretty cool.</p><p><img src='/images/unicorn.jpg' alt='A wearable device to help identify decision moments.'></p><p>Annouk Wipprecht is a fashion designer / engineer who creates wearable devices like the one above. That one in particular is interesting to me, as it focuses on helping identify moments when kids with ADHD “engage”. From <a href='https://spectrum.ieee.org/geek-life/hands-on/i-built-a-brain-computer-interface-for-tackling-adhd-in-children'>a writeup on “Agent Unicorn”</a>:</p><blockquote><p>I decided to focus on what is known as the P300 event-related brain potential signal. P300 is a frequent focus of clinical exams and BCI research. It is a voltage pulse, often thought to be connected to attention and decision making, that occurs a few hundred milliseconds after an external stimulus. The P300 signal is often measured when diagnosing children with ADHD because the signal takes longer to manifest and isn’t as strong as it is in children without ADHD.</p><p>ADHD is commonly treated with stimulants such as Adderall that can boost concentration and focus while reducing hyperactive and impulsive behaviors. But while medication might help soothe symptoms, it doesn’t help in understanding why a child with ADHD is more prone to react to certain stimuli, or how their symptoms might be treated in a way that reduces reliance on drugs.</p><p>My goal was to create a device that would provide the data needed for such insights by monitoring both the brains of children and their environments. The result was Agent Unicorn—a headpiece with a projecting horn. The horn contains an 8-megapixel camera that records video during states of heightened P300 activity, as detected by an EEG built into the headpiece itself. The headpiece has a shape that automatically positions the electrodes at the correct locations on the skull.</p></blockquote><p>Here’s what it looks like when it’s going on a child:</p><p><img src='/images/unicorn_in_situ.jpg' alt='The device's inventor, Annouk Wipprecht, putting the Agent Unicorn device on a child in a classroom.'></p><p>Annouk Wipprecht has some more cool photos of her work in a gallery <a href='https://www.anoukwipprecht.nl/gallery/'>on her site</a>.</p>"
    },
  
    {
      "id": "https://charliepark.org/the_balancing_act/",
      "url": "https://charliepark.org/the_balancing_act/",
      "title": "text: /the_balancing_act/",
      "content_html": "<p>In a great thread on Twitter, Kieran Snyder shares <a href='https://twitter.com/KieranSnyder/status/1308128945447944192'>some great management insights</a>:</p><blockquote><p>The second mistake: Getting the balance wrong between managing up (working w your managers), managing down (working w your team), and managing over (working w your peers).</p><p>Most managers do one of these very well. Some do 2 out of the 3. Few get all 3 right with equal facility.</p><p>But all 3 of these working modes (managing up, down, and over) are important to achieving your main accountability as a manager: Delivering high-impact work on time and growing people in the process.</p><p>If you don’t spend enough time with your team, you fail to set accountabilities and priorities properly and you miss coaching opportunities.</p><p>If you don’t spend enough time with your management, you fail to set priorities properly, and you are likely missing context that can help your team. You also miss chances to be coached.</p><p>If you don’t spend enough time with your peers, your execution will suffer. You won’t know how your team is performing or perceived. You will lack organizational support for initiatives that matter to you.</p><p>At most stages of my early management career, I spent plenty of time with my team and with my management, but I didn’t spend enough time with my peers. That was an Achilles heel that I was only able to see after the fact.</p></blockquote><p>This is really insightful. I’ve talked with folks before about managers usually only being good at one, <em>maybe</em> two of “politics, product, process, or people”, but I think the look at managing up, down, and across is a great one.</p><p>In my last role, I nailed the “working with your team” piece, and did a really good job with the “peers” bit as well. In hindsight, that “managing up” piece was one I should have paid more attention to. Something learned for next time.</p>"
    },
  
    {
      "id": "https://charliepark.org/smarter_permalinks_in_eleventy/",
      "url": "https://charliepark.org/smarter_permalinks_in_eleventy/",
      "title": "text: /smarter_permalinks_in_eleventy/",
      "content_html": "<h1>Smarter Permalinks in Eleventy</h1><p>I’m continuing to enjoy Eleventy. The other day I noted that I was having trouble getting the dates to work correctly, and was hoping for some smarter autoslugging.</p><p>I figured out both, and wanted to share what I did.</p><p>I <em>had</em> been naming the date and permalink in the file’s header …</p><pre class='language-js'><code class='language-js'><span class='token operator'>--</span><span class='token operator'>-</span><br>date<span class='token operator'>:</span> <span class='token string'>'2020-09-21'</span><br>permalink<span class='token operator'>:</span> <span class='token string'>'smarter_permalinks_in_eleventy/'</span><br><span class='token operator'>--</span><span class='token operator'>-</span></code></pre><p>… but that’s duplicating the data in the filename (which was <code>2020-09-21_smarter_permalinks_in_eleventy.md</code>. This would be easier if eleventy <em>just knew</em> what the date and slug should be, right?</p><p>The date part was pretty easy. I removed the <code>date</code> line from the frontmatter data, and, as long as the filename had that YYYY-MM-DD formatting, it worked properly. (Thank you, eleventy, for being smart about that!) I’m still a little unsure that the UTC / PST timezones will play nicely, but it hasn’t shown to be a problem yet. (For some reason the “eleventy will automatically handle filenames with YYYY-MM-DD in them” wasn’t working for me a few days ago. Now it’s fine. ¯\\_(ツ)_/¯ )</p><p>For the permalink, I created a new line in my <code>eleventy.js</code> file …</p><pre class='language-js'><code class='language-js'>eleventyConfig<span class='token punctuation'>.</span><span class='token function'>addFilter</span><span class='token punctuation'>(</span><span class='token string'>'getPermalink'</span><span class='token punctuation'>,</span> <span class='token punctuation'>(</span><span class='token parameter'>page</span><span class='token punctuation'>)</span> <span class='token operator'>=></span> page<span class='token punctuation'>.</span>fileSlug<span class='token punctuation'>.</span><span class='token function'>slice</span><span class='token punctuation'>(</span><span class='token number'>11</span><span class='token punctuation'>)</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span></code></pre><p>… and then added a line to my <code>posts/posts.json</code> file:</p><pre class='language-js'><code class='language-js'><span class='token string'>'permalink'</span><span class='token operator'>:</span> <span class='token string'>'{{ page | getPermalink }}/index.html'</span><span class='token punctuation'>,</span><br></code></pre><p>Now the data and autoslug are generated off of the file name, and my post frontmatter only needs to exist if I’m specifying the post “type” (image, quote, poem, etc.). No more duplicated data.</p>"
    },
  
    {
      "id": "https://charliepark.org/quiet_family_life/",
      "url": "https://charliepark.org/quiet_family_life/",
      "title": "image: /quiet_family_life/",
      "content_html": "<p><img src='/images/moomin.jpg' alt='A panel of the Moomin comic, showing characters sitting around a table. The mother figure says &quot;Isn't this quiet family life wonderful, dear?&quot; The father figure, looking bored, says &quot;Yes … … … but it would be even more wonderful if something exciting and awful happened!&quot;'></p>"
    },
  
    {
      "id": "https://charliepark.org/you_shouldve_asked/",
      "url": "https://charliepark.org/you_shouldve_asked/",
      "title": "text: /you_shouldve_asked/",
      "content_html": "<p>This is one of my favorite comics of all time, and it only takes about five minutes to read.</p><p>Every time I read it, it makes me a better person and a better partner.</p><p><a href='https://english.emmaclit.com/2017/05/20/you-shouldve-asked/'>You Should’ve Asked</a></p>"
    },
  
    {
      "id": "https://charliepark.org/everything/",
      "url": "https://charliepark.org/everything/",
      "title": "quote: /everything/",
      "content_html": "<p>Late last night, inspecting Santa’s handiwork, a simple thought occurred to me. A decade or so from now, when, say, I’m waiting for my son to come home from college for his winter break, and, when he does, he wants to spend his time going out with his friends — how much will I be willing to pay then to be able to go back in time, for one day, to now, when he’s eight years old, he wants to go to movies and play games and build Lego kits with me, and he believes in magic?</p><p>How much then, for one day with what my family has right now? How much? Everything.</p><p><a href='https://daringfireball.net/2011/12/merry'>John Gruber</a></p>"
    },
  
    {
      "id": "https://charliepark.org/rbg/",
      "url": "https://charliepark.org/rbg/",
      "title": "image: /rbg/",
      "content_html": "<img src='/images/rbg_necklace.png' alt='A picture of Ruth Bader Ginsburg's iconic collar, but in black.' style='max-width: 180px'><p>She fought. And fought. And fought.</p><p>We have to do the same.</p>"
    },
  
    {
      "id": "https://charliepark.org/three_days_in/",
      "url": "https://charliepark.org/three_days_in/",
      "title": "text: /three_days_in/",
      "content_html": "<h1>Three Days In</h1><p>I’m three days into using <a href='https://github.com/charliepark/tumblelog/'>this tumblelogging tool</a>, and am pretty happy with it. Obviously, the test is how I’ll use it over time, but things are going well so far.</p><h2>A few things I love</h2><h3>It’s great how low-stress it is</h3><blockquote><p>I don’t worry about whether things are “good enough” to post. I just post them. That’s a big improvement over what I had before, where I let the perfect be the enemy of the good, and, consequently, didn’t post.</p></blockquote><h3>The different formatting types are fun</h3><blockquote><p>I love being able to come up with new post types, and then to style them independently. For example, yesterday, when I added the “poem” type. I’ll come up with a few more, for sure. I still haven’t come up with the “link” format, but look forward to the occasion where I do.</p></blockquote><h3>Posting and hosting are both easy</h3><blockquote><p>It’s really easy to add a new post right now. Create a file with the right Markdown format and frontmatter, run <code>eleventy --serve</code> to see what it looks like, and then commit to git and push remote. (TBH, I actually just leave an iTerm window open with <code>eleventy --serve</code> going all the time.)</p></blockquote><blockquote><p>The workflow is a little dependent on VS Code, where I’m writing these, and running eleventy on my local machine. And I have a few ideas around requiring less of the template in the Markdown file that I need to play with. But it’s working for now.</p></blockquote><h2>Some things to work on</h2><h3>Less metawork</h3><aside class='callout_box'>  <p><b>Update:</b> I’ve fixed this now! See here for more: <a href='/smarter_permalinks_in_eleventy'>Smarter Permalinks in Eleventy</a></p></aside><blockquote><p>Right now I have a bit of duplication of effort, in that I name the file something like <code>2020_09_18_three_days_in.md</code> and then add metadata like</p></blockquote><pre class='language-text'><code class='language-text'>---<br>date: '2020-09-18'<br>permalink: 'three_days_in/'<br>---</code></pre><blockquote><p>The eleventy docs say that it’ll use any YYYY-MM-DD in the file name as a date, but I haven’t found that to be the case (I know my date in the filename is using underscores; even when using dashes it doesn’t seem to quite work). It’d be nice to add something to the compiler / preferences that interpreted the filename correctly and then just used it for the date and permalink. Perhaps there’s a way to configure that, and I just haven’t found it yet.</p></blockquote><h3>Mmmmmaybe a posting interface?</h3><blockquote><p>I can imagine a Svelte app that gives an easy posting input. Name the permalink, adjust the date if needed (but default to now), and give an input field for posting the content. Write the .md file on submission, then run <code>eleventy</code> to process it. At that point, you could just add a button that pushes it to GitHub as well. That’d be pretty cool.</p></blockquote><h3>RSS, or posting to Twitter, etc.</h3><blockquote><p>Right now, hardly anybody knows about this tumblelog, and that’s fine. (Hi, folks who are here!) But I could see it being useful to have some sort of “push this content to Twitter”. I’m not sure how that works with eleventy, and it’s possible there isn’t a convenient hook to do that. But it’d be cool to have that as an option. Maybe it’d be another bit of metadata in the header — if <code>post_to_twitter: true</code>, push it.</p></blockquote><h3>Social?</h3><blockquote><p>I’ve realized that one of the things that Tumblr did well was to give you a place to both create and consume. Twitter, too. Right now, this is just a place where I publish stuff. If I ever decide to make this more of a thing, it’d be helpful to have a place where I can read other people’s stuff, too. (I’ve always wondered why RSS readers don’t also give you a way to publish your own stuff. [Or maybe they do! Dunno!])</p></blockquote><h3>Separating <em>my</em> instance of this from the tool to let you do it yourself</h3><blockquote><p>When I wrote my two-times-ago blog, in Jekyll, a lot of people cloned it on GitHub, I believe to help them with a tagging issue that I solved. The problem was that I began to get worried about changing my blog (because it might mess up other peoples’ stuff?). That’s kind of silly. But if I ever do make this a more general-purpose tool for folks, I’ll want to figure out the best way to split them up. Very do-able; I just haven’t had to think through that piece yet.</p></blockquote><h2>So.</h2><p>So that’s where things are right now. It’s still fun, and I’m enjoying it. And I have a few clear ”next thing to work on”s.</p><p>If you have any feedback, let me know! My DMs on Twitter (@charliepark) are open, though I’m on a bit of a Twitter break at the moment. Nevertheless, say hi!</p>"
    },
  
    {
      "id": "https://charliepark.org/the_big_one/",
      "url": "https://charliepark.org/the_big_one/",
      "title": "text: /the_big_one/",
      "content_html": "<h1>There are fires during wartime, too.</h1><p>There’s a scene in the film <em>Hope and Glory</em> that I think about a lot. Thirty seconds of DDGing haven’t brought up either a clip or a quote, so you’ll have to take my word for what goes on in the scene.</p><p>The film takes place during World War II, in London. Some of the more exciting bits of the film take place during air raids, where German planes drop carpet bombs on the city.</p><p>One night, the family’s out, at a play, or something. They return home, and their house is completely engulfed in flames.</p><p>The mother, horror-struck, turns to the fire chief. “But I didn’t hear the air raid sirens!”</p><p>“There wasn’t an air raid, Ma'am.”</p><p>“But the fire?!”</p><p>“There are fires during wartime too, Ma’am.”</p><p>There are fires during wartime, too.</p><p>It’s tempting — in the middle of a global pandemic AND historic wildfires AND an impending consitutional crisis — to say “Well, damn. It can’t get worse, right?”</p><p>Here’s the thing. Geology doesn’t care about any of that, and we’re just as likely to have a major earthquake during a global pandemic as we are at any other time. The odds haven’t improved just because everything else has gotten terrible.</p><p>If you live in California, I highly recommend the following podcast. It’s nine episodes, each a little over half an hour, produced by KPCC, Southern California Public Radio. It’s sobering, and could save your life.</p><iframe src='https://open.spotify.com/embed-podcast/show/3yaIsM9h6jPJn9d2FRNKVe' width='100%' height='232' frameborder='0' allowtransparency='true' allow='encrypted-media'></iframe><p>Also, connect with your local CERT / <a href='https://sf-fire.org/neighborhood-emergency-response-team-nert'>NERT</a> group and get trained!</p>"
    },
  
    {
      "id": "https://charliepark.org/egg/",
      "url": "https://charliepark.org/egg/",
      "title": "poem: /egg/",
      "content_html": "<h1>Egg</h1><p>by C.G. Hanzlicek</p><p>I’m scrambling an egg for my daughter.<br />“Why are you always whistling?” she asks.<br />“Because I’m happy.”<br />And it’s true,<br />Though it stuns me to say it aloud;<br />There was a time when I wouldn’t<br />Have seen it as my future.<br />It’s partly a matter<br />Of who is there to eat the egg:<br />The self fallen out of love with itself<br />Through the tedium of familiarity,<br />Or this little self,<br />So curious, so hungry,<br />Who emerged from the woman I love,<br />A woman who loves me in a way<br />I’ve come to think I deserve,<br />Now that it arrives from outside me.<br />Everything changes, we’re told,<br />And now the changes are everywhere:<br />The house with its morning light<br />That fills me like a revelation,<br />The yard with its trees<br />That cast a bit more shade each summer,<br />The love of a woman<br />That both is and isn’t confounding,<br />And the love<br />Of this clamor of questions at my waist.<br />Clamor of questions,<br />You clamor of answers,<br />Here’s your egg.<br /></p>"
    },
  
    {
      "id": "https://charliepark.org/the_familiar_and_the_new/",
      "url": "https://charliepark.org/the_familiar_and_the_new/",
      "title": "quote: /the_familiar_and_the_new/",
      "content_html": "<p>One of my philosophies as a designer is that you should first start with the patterns that exist, and only break the rules little by little, in the right places. When [you] don’t break enough patterns, you end up with something boring and predictable. But when you break too many, you end up with something chaotic and confusing. There is a sweet spot, and it contains both the familiar and the new.</p><p>Jack Cheng (<a href='https://www.kickstarter.com/projects/jackcheng/these-days-a-novel/posts/347012'>here</a>, though post is only available to Kickstarter backers)</p>"
    },
  
    {
      "id": "https://charliepark.org/the_library/",
      "url": "https://charliepark.org/the_library/",
      "title": "image: /the_library/",
      "content_html": "<p><img src='/images/the_library_a_great_place_to_get_checked_out.jpg' alt='The Library: A good place to get checked out.'></p>"
    },
  
    {
      "id": "https://charliepark.org/september_15/",
      "url": "https://charliepark.org/september_15/",
      "title": "video: /september_15/",
      "content_html": "<iframe width='560' height='315' src='https://www.youtube.com/embed/n2nI60dpQg0' frameborder='0' allow='accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture' allowfullscreen></iframe><p>It being September 15th, we remember four little girls from Birmingham — Addie Mae Collins, Cynthia Wesley, Carole Robertson, Carol Denise McNair — and twenty years later, a man from Spanish Town, Prince Far I.</p>"
    },
  
    {
      "id": "https://charliepark.org/hello_tumblelog/",
      "url": "https://charliepark.org/hello_tumblelog/",
      "title": "text: /hello_tumblelog/",
      "content_html": "<h1>Hello, tumblelog</h1><p>This is just a quick afternoon project I threw together, to play a bit more with Eleventy (<a href='https://www.11ty.dev/'>11ty</a>) and <a href='http://netlify.com/'>Netlify</a>.</p><p>The goal was to create a very basic tumblelog, which most of the world knew as “the kind of microblog that Tumblr made”. Which isn’t <em>wrong</em>. But there were tumblelogs before Tumblr, and, I guess, after Tumblr as well.</p><p>I think I’ve been hesitant to do much with my main website because … it feels like my homepage should be SeRiOuS. Which, yeah, maybe. But it’s also kind of dead right now.</p><p>So! I’m going to try this out and see if it works. If it does, I’ll look into moving my main blog over to this.</p><p>Development went pretty well. I’ve built a few things with Eleventy before. I have to say, every time I start fresh with it I have to wrestle with the docs a fair amount. A lot of it’s really straightforward and clear. But something as basic as “how do I post a copy of each post’s content on the main page?” is somehow hard to search for. (The answer, by the way, is something like this:</p><pre class='language-html'><code class='language-html'>{%- for post in collections.all | reverse -%}<br><span class='token tag'><span class='token tag'><span class='token punctuation'>&lt;</span>article</span> <span class='token attr-name'>class</span><span class='token attr-value'><span class='token punctuation attr-equals'>=</span><span class='token punctuation'>'</span>{{ post | setClasses }}<span class='token punctuation'>'</span></span><span class='token punctuation'>></span></span><br>{%- if post.data.date %}<br>  <span class='token tag'><span class='token tag'><span class='token punctuation'>&lt;</span>time</span> <span class='token attr-name'>class</span><span class='token attr-value'><span class='token punctuation attr-equals'>=</span><span class='token punctuation'>'</span>postdate<span class='token punctuation'>'</span></span> <span class='token attr-name'>datetime</span><span class='token attr-value'><span class='token punctuation attr-equals'>=</span><span class='token punctuation'>'</span>{{ post.data.date | getISOString }}<span class='token punctuation'>'</span></span><span class='token punctuation'>></span></span><br>    <span class='token tag'><span class='token tag'><span class='token punctuation'>&lt;</span>a</span> <span class='token attr-name'>href</span><span class='token attr-value'><span class='token punctuation attr-equals'>=</span><span class='token punctuation'>'</span>{{ post.url }}<span class='token punctuation'>'</span></span><span class='token punctuation'>></span></span>{{ post.data.date | getHumanDate }}<span class='token tag'><span class='token tag'><span class='token punctuation'>&lt;/</span>a</span><span class='token punctuation'>></span></span><br>  <span class='token tag'><span class='token tag'><span class='token punctuation'>&lt;/</span>time</span><span class='token punctuation'>></span></span><br>{%- endif %}<br>  <span class='token tag'><span class='token tag'><span class='token punctuation'>&lt;</span>div</span> <span class='token attr-name'>class</span><span class='token attr-value'><span class='token punctuation attr-equals'>=</span><span class='token punctuation'>'</span>postbody<span class='token punctuation'>'</span></span><span class='token punctuation'>></span></span><br>    {{ post.templateContent | safe }}<br>  <span class='token tag'><span class='token tag'><span class='token punctuation'>&lt;/</span>div</span><span class='token punctuation'>></span></span><br><span class='token tag'><span class='token tag'><span class='token punctuation'>&lt;/</span>article</span><span class='token punctuation'>></span></span><br>{%- endfor -%}<br></code></pre><p>Oh! And that datetime format is handled like this, in your eleventy config file:</p><pre class='language-js'><code class='language-js'><span class='token keyword'>const</span> <span class='token function-variable function'>setDateToMidnight</span> <span class='token operator'>=</span> <span class='token punctuation'>(</span><span class='token parameter'>date</span><span class='token punctuation'>)</span> <span class='token operator'>=></span> <span class='token punctuation'>(</span><span class='token keyword'>new</span> <span class='token class-name'>Date</span><span class='token punctuation'>(</span>date<span class='token punctuation'>)</span><span class='token punctuation'>)</span><span class='token punctuation'>.</span><span class='token function'>toUTCString</span><span class='token punctuation'>(</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br><br><span class='token keyword'>const</span> <span class='token function-variable function'>getISOString</span> <span class='token operator'>=</span> <span class='token punctuation'>(</span><span class='token parameter'>date</span><span class='token punctuation'>)</span> <span class='token operator'>=></span> <span class='token punctuation'>{</span><br>  <span class='token keyword'>const</span> midnight <span class='token operator'>=</span> <span class='token function'>setDateToMidnight</span><span class='token punctuation'>(</span>date<span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>return</span> <span class='token keyword'>new</span> <span class='token class-name'>Date</span><span class='token punctuation'>(</span>midnight<span class='token punctuation'>)</span><span class='token punctuation'>.</span><span class='token function'>toISOString</span><span class='token punctuation'>(</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br><span class='token punctuation'>}</span><span class='token punctuation'>;</span><br><span class='token keyword'>const</span> <span class='token function-variable function'>getHumanDate</span> <span class='token operator'>=</span> <span class='token punctuation'>(</span><span class='token parameter'>date</span><span class='token punctuation'>)</span> <span class='token operator'>=></span> <span class='token punctuation'>{</span><br>  <span class='token keyword'>const</span> midnight <span class='token operator'>=</span> <span class='token function'>setDateToMidnight</span><span class='token punctuation'>(</span>date<span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  <span class='token keyword'>return</span> <span class='token keyword'>new</span> <span class='token class-name'>Date</span><span class='token punctuation'>(</span>midnight<span class='token punctuation'>)</span><span class='token punctuation'>.</span><span class='token function'>toLocaleString</span><span class='token punctuation'>(</span><span class='token string'>'en-us'</span><span class='token punctuation'>,</span> <span class='token punctuation'>{</span><br>    month<span class='token operator'>:</span> <span class='token string'>'long'</span><span class='token punctuation'>,</span><br>    day<span class='token operator'>:</span> <span class='token string'>'numeric'</span><span class='token punctuation'>,</span><br>    year<span class='token operator'>:</span> <span class='token string'>'numeric'</span><span class='token punctuation'>,</span><br>    timeZone<span class='token operator'>:</span> <span class='token string'>'UTC'</span><br>  <span class='token punctuation'>}</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br><span class='token punctuation'>}</span><span class='token punctuation'>;</span><br><br>module<span class='token punctuation'>.</span><span class='token function-variable function'>exports</span> <span class='token operator'>=</span> <span class='token keyword'>function</span> <span class='token punctuation'>(</span><span class='token parameter'>eleventyConfig</span><span class='token punctuation'>)</span> <span class='token punctuation'>{</span><br>  eleventyConfig<span class='token punctuation'>.</span><span class='token function'>addFilter</span><span class='token punctuation'>(</span><span class='token string'>'getHumanDate'</span><span class='token punctuation'>,</span> <span class='token punctuation'>(</span><span class='token parameter'>date</span><span class='token punctuation'>)</span> <span class='token operator'>=></span> <span class='token function'>getHumanDate</span><span class='token punctuation'>(</span>date<span class='token punctuation'>)</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br>  eleventyConfig<span class='token punctuation'>.</span><span class='token function'>addFilter</span><span class='token punctuation'>(</span><span class='token string'>'getISOString'</span><span class='token punctuation'>,</span> <span class='token punctuation'>(</span><span class='token parameter'>date</span><span class='token punctuation'>)</span> <span class='token operator'>=></span> <span class='token function'>getISOString</span><span class='token punctuation'>(</span>date<span class='token punctuation'>)</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span><br><span class='token punctuation'>}</span></code></pre><p>Note the <code>timeZone: 'UTC'</code> bit in the <code>toLocaleString()</code> options! It’s pretty important!</p>"
    }
  
  ]
}